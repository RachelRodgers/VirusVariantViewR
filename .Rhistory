referenceString <- as.character(currentVCFFile[j, "Reference"])
alternativeString <- currentVCFFile[j, "Alternative"]
variantID <- paste(positionString, referenceString, alternativeString,
sep = "_")
newVariant <- new("Variant",
parent_sample = currentSample,
position = as.numeric(positionString),
ref_allele = referenceString,
alt_allele = alternativeString)
currentSampleVariantList[[j]] <- newVariant
names(currentSampleVariantList)[j] <- variantID
#currentSampleVariantList[[variantID]] <- newVariant
}
# Fill in the sample object
newSample <- new("Sample",
sample_name = currentSample,
variant_list = currentSampleVariantList)
# Add to sampleClassList
sampleClassList[[i]] <- newSample
names(sampleClassList)[i] <- currentSample
#sampleClassList[[currentSample]] <- newSample
}
}
return(sampleClassList)
}
sampleVector <- c("Baldridge_17", "Baldridge_16", "Baldridge_15", "TEST_EMPTY")
dataSet <- "baldridge_rumspringa"
originalSampleObjectList <- BuildSampleObjects(dataSet = dataSet, sampleVector = sampleVector)
library("shiny")
library("shinythemes")
library("shinyjs")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
source("./global.R")
originalSampleObjectList <- BuildSampleObjects(dataSet = dataSet, sampleVector = sampleVector)
# Check if any samples have 0 variants and remove.
variantsAreNull <- vector(mode = "logical", length = length(originalSampleObjectList))
originalSampleObjectList <- BuildSampleObjects(dataSet = dataSet, sampleVector = sampleVector)
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
originalSampleObjectList <- BuildSampleObjects(dataSet = dataSet, sampleVector = sampleVector)
View(originalSampleObjectList)
for (i in 1:length(originalSampleObjectList)) {
variantsAreNull[i]<- is.null(names(originalSampleObjectList[[i]]@variant_list))
}
# Check if any samples have 0 variants and remove.
variantsAreNull <- vector(mode = "logical", length = length(originalSampleObjectList))
for (i in 1:length(originalSampleObjectList)) {
variantsAreNull[i]<- is.null(names(originalSampleObjectList[[i]]@variant_list))
}
selectedSampleObjectList <- originalSampleObjectList[!variantsAreNull]
View(selectedSampleObjectList)
View(originalSampleObjectList)
# Loop over each sample object in test, store the names of its variants in vectors
allVariantsList <- vector(mode = "list", length = length(originalSampleOjectList))
# Loop over each sample object in test, store the names of its variants in vectors
allVariantsList <- vector(mode = "list", length = length(selectedSampleObjectList))
# Populate allVariantsList
# Returns a list with each element named after a sample, and holds a list
#   of variants named as "position_ref_alt"
for (k in 1:length(selectedSampleObjectList)) {
currentSample <- selectedSampleObjectList[[k]]
currentSampleVariants <- names(currentSample@variant_list)
allVariantsList[[k]] <- currentSampleVariants
names(allVariantsList)[k] <- currentSample@sample_name
}
View(allVariantsList)
# For all the variants between the selected samples, make a table showing which
#   samples they are in.
#   First check that the sample has variants. (is it's variant_list slot == 0?)
#   If yes, skip it.
variantDFList <- vector(mode = "list", length = length(selectedSampleObjectList))
for (k in 1:length(selectedSampleObjectList)) {
currentSample <- selectedSampleObjectList[[k]]
currentSampleName <- currentSample@sample_name
currentSampleDF <- data.frame(names(currentSample@variant_list), 1)
colnames(currentSampleDF) <- c("variants", currentSampleName)
variantDFList[[k]] <- currentSampleDF
}
View(variantDFList)
fullDF <- Reduce(f = function(df1, df2) {merge(x = df1, y = df2,
by = "variants", all = TRUE)},
x = variantDFList)
View(fullDF)
fullDF[is.na(fullDF)] <- 0
fullDFModified <- column_to_rownames(fullDF, var = "variants")
variantCounts <- rowSums(fullDFModified)
View(fullDFModified)
variantCounts <- rowSums(fullDFModified)
variantCounts
# Which samples do you find each variant in?
variantInSamples <- vector(mode = "character", length = nrow(fullDFModified))
for (m in 1:nrow(fullDFModified)) {
currentRow <- fullDFModified[m, ]
currentVariantName <- rownames(currentRow)
variantInSamples[[m]] <- colnames(currentRow)[currentRow != 0]
names(variantInSamples)[m] <- currentVariantName
}
for (m in 1:nrow(fullDFModified)) {
currentRow <- fullDFModified[m, ]
currentVariantName <- rownames(currentRow)
variantInSamples[m] <- colnames(currentRow)[currentRow != 0]
names(variantInSamples)[m] <- currentVariantName
}
variantInSamples
# Which samples do you find each variant in?
variantInSamples <- vector(mode = "list", length = nrow(fullDFModified))
for (m in 1:nrow(fullDFModified)) {
currentRow <- fullDFModified[m, ]
currentVariantName <- rownames(currentRow)
variantInSamples[[m]] <- colnames(currentRow)[currentRow != 0]
names(variantInSamples)[m] <- currentVariantName
}
View(variantInSamples)
currentRow <- fullDFModified[2,]
View(currentRow)
colnames(currentRow)[currentRow != 0]
vec <- colnames(currentRow)[currentRow != 0]
vec
paste(vec, ", ")
collapse(vec, ", ")
paste(vec, collapse = ", ")
# Which samples do you find each variant in?
variantInSamples <- vector(mode = "character", length = nrow(fullDFModified))
for (m in 1:nrow(fullDFModified)) {
currentRow <- fullDFModified[m, ]
currentVariantName <- rownames(currentRow)
samplesVecString <- paste(colnames(currentRow)[currentRow != 0], collapse = ", ")
variantInSamples[m] <- samplesVecString
names(variantInSamples)[m] <- currentVariantName
}
variantInSamples
# Change things to a DF merge
variantCountsDF <- data.frame(variantCountns)
# Change things to a DF merge
variantCountsDF <- data.frame(variantCounts)
View(variantCountsDF)
variantInSamplesDF <- data.frame(variantInSamples)
View(variantInSamplesDF)
dim(variantCountsDF)
dim(variantInSamplesDF)
# Change things to a DF merge
variantCountsDF <- data.frame("Number of Samples" = variantCounts)
# Change things to a DF merge
variantCountsDF <- data.frame("Number_of_Samples" = variantCounts)
variantInSamplesDF <- data.frame("Samples" = variantInSamples)
# Make sure the dimensions of these match
if (dim(variantCountsDF) != dim(variantInSamplesDF)) {
stop("Something is wrong with the variant/sample counting.",
call. = FALSE)
}
# Make sure the dimensions of these match
if (!(identical(variantCountsDF, variantInSamplesDF))) {
stop("Something is wrong with the variant/sample counting.",
call. = FALSE)
}
# Make sure the dimensions of these match
if (!(identical(dim(variantCountsDF), dim(variantInSamplesDF)))) {
stop("Something is wrong with the variant/sample counting.",
call. = FALSE)
}
# Otherwise, merge them.
variantDataDF <- merge(variantCountsDF, variantInSamplesDF, by = "row.names")
View(variantDataDF)
variantDataDF <- variantDataDF %>%
column_to_rownames()
variantDataDF <- variantDataDF %>%
column_to_rownames(var = "Row.names")
# Otherwise, merge them.
variantDataDF <- merge(variantCountsDF, variantInSamplesDF, by = "row.names")
variantDataDF <- variantDataDF %>%
arrange(Number_of_Samples) %>%
column_to_rownames(var = "Row.names")
variantDataDF <- variantDataDF %>%
arrange(desc(Number_of_Samples)) %>%
column_to_rownames(var = "Row.names")
View(variantDataDF)
# Otherwise, merge them.
variantDataDF <- merge(variantCountsDF, variantInSamplesDF, by = "row.names")
variantDataDF <- variantDataDF %>%
arrange(desc(Number_of_Samples)) %>%
column_to_rownames(var = "Row.names")
View(variantDataDF)
# Otherwise, merge them.
variantDataDF <- merge(variantCountsDF, variantInSamplesDF, by = "row.names")
variantDataDF <- variantDataDF %>%
filter(Number_of_Samples >= 2) %>%
arrange(desc(Number_of_Samples)) %>%
column_to_rownames(var = "Row.names")
# Change things to a DF merge
variantCountsDF <- data.frame("Number_of_Samples" = variantCounts/length(selectedSampleObjectList))
View(variantCountsDF)
# Change things to a DF merge
variantCountsDF <- data.frame("Percent_of_Selected_Samples" =
(round(100*(variantCounts/length(selectedSampleObjectList))),
digits = 3))
# Change things to a DF merge
variantCountsDF <- data.frame("Percent_of_Selected_Samples" =
(round(100*(variantCounts/length(selectedSampleObjectList)), digits = 3)))
# Change things to a DF merge
variantCountsDF <- data.frame("Percent_of_Selected_Samples" =
(round(100*(variantCounts/length(selectedSampleObjectList)), digits = 1)))
variantCountsDF <- data.frame("Percentage_of_Selected_Samples" =
(round(100*(variantCounts/length(selectedSampleObjectList)), digits = 1)))
variantInSamplesDF <- data.frame("Samples" = variantInSamples)
# Make sure the dimensions of these match
if (!(identical(dim(variantCountsDF), dim(variantInSamplesDF)))) {
stop("Something is wrong with the variant/sample counting.",
call. = FALSE)
}
# Otherwise, merge them.
variantDataDF <- merge(variantCountsDF, variantInSamplesDF, by = "row.names")
variantDataDF <- variantDataDF %>%
filter(Number_of_Samples >= 2) %>%
arrange(desc(Number_of_Samples)) %>%
column_to_rownames(var = "Row.names")
variantCountsDF <- data.frame("Number_of_Samples" = variantCounts)
variantInSamplesDF <- data.frame("Samples" = variantInSamples)
# Make sure the dimensions of these match
if (!(identical(dim(variantCountsDF), dim(variantInSamplesDF)))) {
stop("Something is wrong with the variant/sample counting.",
call. = FALSE)
}
# Otherwise, merge them.
variantDataDF <- merge(variantCountsDF, variantInSamplesDF, by = "row.names")
variantDataDF <- variantDataDF %>%
filter(Number_of_Samples >= 2) %>%
arrange(desc(Number_of_Samples)) %>%
column_to_rownames(var = "Row.names")
variantCountsDF <- data.frame("Number_of_Samples" = variantCounts)
variantInSamplesDF <- data.frame("Samples" = variantInSamples)
# Make sure the dimensions of these match
if (!(identical(dim(variantCountsDF), dim(variantInSamplesDF)))) {
stop("Something is wrong with the variant/sample counting.",
call. = FALSE)
}
# Otherwise, merge them.
variantDataDF <- merge(variantCountsDF, variantInSamplesDF, by = "row.names")
variantDataDF <- variantDataDF %>%
arrange(desc(Number_of_Samples)) %>%
column_to_rownames(var = "Row.names")
any(variantDataDF$Number_of_Samples >= 2)
variantDataDF <- variantDataDF %>%
filter(Number_of_Samples >= 23) %>%
arrange(desc(Number_of_Samples)) %>%
column_to_rownames(var = "Row.names")
variantCountsDF <- data.frame("Number_of_Samples" = variantCounts)
variantInSamplesDF <- data.frame("Samples" = variantInSamples)
# Make sure the dimensions of these match
if (!(identical(dim(variantCountsDF), dim(variantInSamplesDF)))) {
stop("Something is wrong with the variant/sample counting.",
call. = FALSE)
}
# Otherwise, merge them.
variantDataDF <- merge(variantCountsDF, variantInSamplesDF, by = "row.names")
variantDataDF <- variantDataDF %>%
filter(Number_of_Samples >= 23) %>%
arrange(desc(Number_of_Samples)) %>%
column_to_rownames(var = "Row.names")
View(variantDataDF)
View(variantDataDF)
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/common_var_testing.R')
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
?withProgress
runApp()
runApp()
runApp()
runApp()
currentSampleName <- currentSample@sample_name
runApp()
install.packages("BiocManager")
BiocManager::install("VariantAnnotation", version = "3.8")
library(VariantAnnotation)
?system.file
fl <- system.file("../baldridge_rumspringa/variants/Baldridge_33_variants.vcf",
package = "VariantAnnotation")
fl <- system.file("..", "baldridge_rumspringa", "variants", "Baldridge_33_variants.vcf",
package = "VariantAnnotation")
VariantAnnotation::system.file
?VariantAnnotation::system.file
?readVcf
vcf <- readVcf(file = "../baldridge_rumspringa/variants/Baldridge_33_variants.vcf",
genome = "Modified_CR6")
rm(fl)
vcf
geno(header(vcf))
header(vcf)
head(rowRanges(vcf))
rowRanges(vcf)
geno(vcf)
geno(header(vcf))["AD", ]
AD <- geno(vcf)$AD
dim(AD)
AD
info(vcf)
orf3NT <- "ATGGCTGGCGCACTCTTTGGTGCGATTGGAGGTGGCCTGATGGGCATAATTGGCAATTCCATCTCAACAG
TCCAGAATCTTCAGGCAAATAAACAATTGGCTGCACAGCAATTTGGCTATAATTCCTCTCTGCTTGCAAC
GCAAATTCAGGCCCAGAAGGATCTCACACTGATGGGGCAGCAGTTCAACCAGCAGCTCCAAGCCAACTCT
TTCAAGCATGACCTTGAGATGCTTGGCGCCCAGGTGCAAGCCCAGGCGCAGGCCCAGGAGAACGCTATCA
ACATCAGGTCGGCGCAGCTCCAGGCCGCAGGCTTTTCAAAGTCCGACGCCATTCGCTTGGCCTCGGGGCA
GCAACCGACGAGGGCCGTTGACTGGTCTGGGACGCGGTATTACGCCGCTAACCAGCCGGTTACGGGCTTC
TCGGGTGGCTTCACCCCAAGTTACACTCCAGGTAGGCAAATGGCAGTCCGCCCTGTGGACACATCCCCTC
TACCGGTCTCGGGTGGACGCATGCCGTCCCTTCGTGGAGGTTCCTGGTCTCCGCGTGATTACACGCCGCA
GACCCAAGGCACCTACACGAACGGGCGGTTTGTGTCCTTCCCAAAGATCGGGAGTAGCAGGGCATAG"
?seq_along
orf3NTPositions <- seq_along(1, length(orf3NT), by = 1)
orf3NTPositions <- seq(from = 1, to = length(orf3NT), by = 1)
, by = 1
orf3NTPositions <- seq(from = 1, to = length(orf3NT))
orf3NTPositions <- seq(from = 1, to = nchar(orf3NT))
orf3NTPositions <- seq(from = 1, to = nchar(orf3NT), by = 1)
# . matches any character
# .{3} match any character 3 x's
gsub("(.{3})", "\\1", orf3NT)
?gsub
# . matches any character
# .{3} match any character 3 x's
gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT)
# . matches any character
# .{3} match any character 3 x's
codons <- gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT)
head(codons)
?strsplit
# . matches any character
# .{3} match any character 3 x's
codons <- str_split(x = gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT),
split = "\n")
# . matches any character
# .{3} match any character 3 x's
codons <- strsplit(x = gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT),
split = "\n")
View(codons)
library("stringr")
# . matches any character
# .{3} match any character 3 x's
codons <- stringr::str_split(x = gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT),
pattern = "\\n")
# . matches any character
# .{3} match any character 3 x's
codons <- stringr::str_split(string = gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT),
pattern = "\\n")
View(codons)
# . matches any character
# .{3} match any character 3 x's
codons <- string = gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT)
# . matches any character
# .{3} match any character 3 x's
codons <- gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT)
codons
str_split(codons, "\\n")
# . matches any character
# .{3} match any character 3 x's
codons <- gsub(pattern = "(.{3})", replacement = "\\1", x = "ATGGCTGGCGCACTCTTTGGTGCGATTGGAGGTGGCCTGATGGGCATAATTGGCAATTCCATCTCAACAG
TCCAGAATCTTCAGGCAAATAAACAATTGGCTGCACAGCAATTTGGCTATAATTCCTCTCTGCTTGCAAC
GCAAATTCAGGCCCAGAAGGATCTCACACTGATGGGGCAGCAGTTCAACCAGCAGCTCCAAGCCAACTCT
TTCAAGCATGACCTTGAGATGCTTGGCGCCCAGGTGCAAGCCCAGGCGCAGGCCCAGGAGAACGCTATCA
ACATCAGGTCGGCGCAGCTCCAGGCCGCAGGCTTTTCAAAGTCCGACGCCATTCGCTTGGCCTCGGGGCA
GCAACCGACGAGGGCCGTTGACTGGTCTGGGACGCGGTATTACGCCGCTAACCAGCCGGTTACGGGCTTC
TCGGGTGGCTTCACCCCAAGTTACACTCCAGGTAGGCAAATGGCAGTCCGCCCTGTGGACACATCCCCTC
TACCGGTCTCGGGTGGACGCATGCCGTCCCTTCGTGGAGGTTCCTGGTCTCCGCGTGATTACACGCCGCA
GACCCAAGGCACCTACACGAACGGGCGGTTTGTGTCCTTCCCAAAGATCGGGAGTAGCAGGGCATAG")
str_split(codons, "\\n")
orf3NT <- "ATGGCTGGCGCACTCTTTGGTGCGATTGGAGGTGGCCTGATGGGCATAATTGGCAATTCCATCTCAACAG
TCCAGAATCTTCAGGCAAATAAACAATTGGCTGCACAGCAATTTGGCTATAATTCCTCTCTGCTTGCAAC
GCAAATTCAGGCCCAGAAGGATCTCACACTGATGGGGCAGCAGTTCAACCAGCAGCTCCAAGCCAACTCT
TTCAAGCATGACCTTGAGATGCTTGGCGCCCAGGTGCAAGCCCAGGCGCAGGCCCAGGAGAACGCTATCA
ACATCAGGTCGGCGCAGCTCCAGGCCGCAGGCTTTTCAAAGTCCGACGCCATTCGCTTGGCCTCGGGGCA
GCAACCGACGAGGGCCGTTGACTGGTCTGGGACGCGGTATTACGCCGCTAACCAGCCGGTTACGGGCTTC
TCGGGTGGCTTCACCCCAAGTTACACTCCAGGTAGGCAAATGGCAGTCCGCCCTGTGGACACATCCCCTC
TACCGGTCTCGGGTGGACGCATGCCGTCCCTTCGTGGAGGTTCCTGGTCTCCGCGTGATTACACGCCGCA
GACCCAAGGCACCTACACGAACGGGCGGTTTGTGTCCTTCCCAAAGATCGGGAGTAGCAGGGCATAG"
# . matches any character
# .{3} match any character 3 x's
codons <- gsub(pattern = "(.{3})", replacement = "\\1", x = orf3NT)
head(codons)
# . matches any character
# .{3} match any character 3 x's
codons <- gsub(pattern = "(.{5})", replacement = "\\1", x = orf3NT)
head(codons)
gsub("(.{5})", "\\1 ", "XOVEWVJIEWNIGOIWENVOIWEWVWEW")
gsub("(.{5})", "\\1 ", orf3NT)
# . matches any character
# .{3} match any character 3 x's
codons <- gsub("(.{5})", "\\1", orf3NT)
head(codons)
codons <- gsub("(.{5})", "\\1 ", orf3NT)
head(codons)
# . matches any character
# .{3} match any character 3 x's
# note in the backreference there is a white space char "\\1<ws>"
codons <- gsub("(.{3})", "\\1 ", orf3NT)
head(codons)
codonsSeparate <- str_split(codons, pattern = " ")
View(codonsSeparate)
orf3NT <- "ATGGCTGGCGCACTCTTTGGTGCGATTGGAGGTGGCCTGATGGGCATAATTGGCAATTCCATCTCAACAGTCCAGAATCTTCAGGCAAATAAACAATTGGCTGCACAGCAATTTGGCTATAATTCCTCTCTGCTTGCAACGCAAATTCAGGCCCAGAAGGATCTCACACTGATGGGGCAGCAGTTCAACCAGCAGCTCCAAGCCAACTCTTTCAAGCATGACCTTGAGATGCTTGGCGCCCAGGTGCAAGCCCAGGCGCAGGCCCAGGAGAACGCTATCAACATCAGGTCGGCGCAGCTCCAGGCCGCAGGCTTTTCAAAGTCCGACGCCATTCGCTTGGCCTCGGGGCAGCAACCGACGAGGGCCGTTGACTGGTCTGGGACGCGGTATTACGCCGCTAACCAGCCGGTTACGGGCTTCTCGGGTGGCTTCACCCCAAGTTACACTCCAGGTAGGCAAATGGCAGTCCGCCCTGTGGACACATCCCCTCTACCGGTCTCGGGTGGACGCATGCCGTCCCTTCGTGGAGGTTCCTGGTCTCCGCGTGATTACACGCCGCAGACCCAAGGCACCTACACGAACGGGCGGTTTGTGTCCTTCCCAAAGATCGGGAGTAGCAGGGCATAG"
orf3NTPositions <- seq(from = 1, to = nchar(orf3NT), by = 1)
# . matches any character
# .{3} match any character 3 x's
# note in the backreference there is a white space char "\\1<ws>"
codons <- gsub("(.{3})", "\\1 ", orf3NT)
head(codons)
# . matches any character
# .{3} match any character 3 x's
# note in the backreference there is a white space char "\\1<ws>"
codons <- gsub("(.{3})", "\\1-", orf3NT)
head(codons)
codonsSeparate <- str_split(codons, pattern = "-")
View(codonsSeparate)
tail(codonsSeparate)
orf3AA <- "MAGALFGAIGGGLMGIIGNSISTVQNLQANKQLAAQQFGYNSSLLATQIQAQKDLTLMGQQFNQQLQANSFKHDLEMLGAQVQAQAQAQENAINIRSAQLQAAGFSKSDAIRLASGQQPTRAVDWSGTRYYAANQPVTGFSGGFTPSYTPGRQMAVRPVDTSPLPVSGGRMPSLRGGSWSPRDYTPQTQGTYTNGRFVSFPKIGSSRA"
aa <- gsub("(.{1})", "\\-", ofr3AA)
aa <- gsub("(.{1})", "\\-", orf3AA)
aa <- gsub("(.{1})", "\\1-", orf3AA)
aaSeparate <- str_split(aa, pattern = "-")
tail(aaSeparate)
codonVec <- unlist(codonsSeparate)
View(codonsSeparate)
codonVec <- unlist(codonsSeparate)[[1]]
codonVec <- c(unlist(codonsSeparate)[[1]])
length(codonsSeparate[[1]])
length(aaSeparate[[1]])
View(aaSeparate)
View(codonsSeparate)
codonVec <- unlist(codonsSeparate[[1]][1])
codonsSeparate[1]
codonVec <- codonsSeparate[1]
View(codonVec)
codonVec <- codonsSeparate[[1]]
aaVec <- aaSeparate[[1]]
aaVec[209]
codonVec[210]
1:length(codonVec)-1
# remove that last weird element
codonVec <- codonVec[1:length(codonVec)-1]
tail(codonVec)
head(codonVec)
# name the codon vector
names(codonVec) <- aaVec
head(codonVec)
head(codonVec, 10)
setClass("Codon",
representation = representation(sequence = "character",
start = "numeric",
end = "numeric",
protein = "character"),
prototype = prototype(sequence = NA_character_,
start = NA_real_,
end = NA_real_,
protein = NA_character_))
codonClassList <- vector(mode = "list", length = length(codonVec))
for (i in 1:length(codonClassList)) {
if (i == 1) {
newCodonClass <- new("Codon",
sequence = codonVec[i],
start = i,
end = (i + 2),
protein = names(codonVec)[i])
codonClassList[[i]] <- newCodonClass
} else {
newCodonClass <- new("Codon",
sequence = codonVec[i],
start = ((i*3) - 2),
end = (i*3),
protein = names(codonVec)[i])
codonClassList[[i]] <- newCodonClass
}
}
View(codonClassList)
codonVec[209]
names(codonVec[209])
aaVec[aaVec = ""]
aaVec = ""
aaVec <- aaSeparate[[1]]
aaVec == ""
aaVec[aaVec == ""] <- "STOP"
codonVec <- codonsSeparate[[1]]
# remove that last weird element
codonVec <- codonVec[1:length(codonVec)-1]
# name the codon vector
names(codonVec) <- aaVec
tail(codonVec)
codonClassList <- vector(mode = "list", length = length(codonVec))
for (i in 1:length(codonClassList)) {
if (i == 1) {
newCodonClass <- new("Codon",
sequence = codonVec[i],
start = i,
end = (i + 2),
protein = names(codonVec)[i])
codonClassList[[i]] <- newCodonClass
} else {
newCodonClass <- new("Codon",
sequence = codonVec[i],
start = ((i*3) - 2),
end = (i*3),
protein = names(codonVec)[i])
codonClassList[[i]] <- newCodonClass
}
}
View(codonClassList)
View(newCodonClass)
View(codonClassList)
length(orf3NT)
nchar(orf3NT)
7307 - 6680
