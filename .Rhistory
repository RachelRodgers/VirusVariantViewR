widthVector <- map_int(.x = altAlleles, .f = nchar)
shiny::runApp()
testSubset <- subset(testVCFFile, testVCFFile[1, "Alternative"])
testSubset <- testVCFFile[1, "Alternative"]
runApp()
runApp()
whatsit <- testVCFFile[testVCFFile[["Alternative"]] == 690]
View(whatsit)
whatsit <- testVCFFile[testVCFFile[["Position"]] == 690]
subset(testVCFFile, testVCFFile$Position == 690)
firstSubset <- subset(testVCFFile, testVCFFile$Position == 690)
class(firstSubset)
View(firstSubset)
firstSubst$Alternative
firstSubset$Alternative
class(firstSubset$Alternative)
firstSubset[[,"Alternative"]]
firstSubset[,"Alternative"]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
?datatable
runApp()
runApp()
?datatable
runApp()
?verbatimTextOutput
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?reactive
runApp()
runApp()
View(iris)
irisDF <- iris
list <- list(row = 1, column = 1, value = 5.1)
list$row
irisDF[list]
runApp()
test <- matrix(1,1)
View(test)
?matrix
matrix
test
test <- matrix(c(1,2,3,4))
test <- matrix(row = c(1,2,3,4), column = c(1,2))
test <- matrix(1:9, nrow = 3)
test2 <- matrix[, 1] + 1
test2 <- test[, 1] + 1
View(test2)
test[ , 1]
?apply
rebuilt <- cbind(test, test[, 2:3])
View(rebuilt)
test[ , 1] + 1
rebuilt <- cbind((test[ ,1] +1), test[ , 2:3]
)
View(rebuilt)
runApp()
runApp()
runApp()
test
test[,2] < 5
?subset
?`[`
runApp()
test[,2] < 5
test[test[,2] < 5]
test[test[,2] < 5, drop = FALSE]
test[test[,2] < 5,, drop = FALSE]
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getOption(display.mode)
runApp(app.R, "showcase")
?runApp
runApp()
runApp()
version()
?version
R.Version()
runApp()
runApp()
runApp()
runApp()
View(sampleData)
View(testVCFFile)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Some constants for calculation/formatting avg. genome coverage:
genome_size <- 7383
previousMtxSize <- 0
runApp()
#----- Libraries -----#
library("shiny")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
options(shiny.sanitize.errors = FALSE)
options(ucscChromosomeNames = FALSE) # for Gvis
#----- Function Definitions -----#
GetVCF <- function(sample) {
# Read in and format VCF file for selected sample
variantSample <- paste0("../variants/", sample, "_variants.vcf")
vcfFile <- read.delim(variantSample,
comment.char = "#", # ignore VCF header lines
header = FALSE,
colClasses = "character") # suppress conversion of columns
vcfHeaders <- c("Refence Genome", "Position",
"ID", "Reference", "Alternative",
"Quality", "Filter", "Info", "Format", "Values")
names(vcfFile) <- vcfHeaders
# The last number in Values will be the allelic depth - unfiltered number of
#   reads supporting the reported allele(s)
vcfFileFormatted <- vcfFile %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1)) %>%
select(-c("ID", "Filter", "Info", "Format", "Values"))
}
PlotCoverage <- function(sample, positions = NULL, widths = 1) {
# Get the coverage file
bedgraphDT <- fread(paste0("../alignment_files/", sample, "_sorted.bedGraph"),
col.names = c("chromosome", "start", "end", "value"))
# Generate the top axis track
gtrack <- GenomeAxisTrack(fontsize = 20, fontcolor = "black", col = "black")
# Generate the coverage track
dtrack <- DataTrack(range = bedgraphDT, genome = "ModCR6",
type = "histogram", name = "Coverage",
background.title = "slategrey", col.histogram = "grey28",
fontsize = 20)
# is positions null?
# if yes - plot tracks w/o highlights
# if no - plot tracks with highlights
if (is.null(positions)) {
coveragePlot <- plotTracks(list(gtrack, dtrack))
} else {
htrack <- HighlightTrack(trackList = list(dtrack),
start = positions,
width= widths,
inBackground = FALSE,
fill = "#FFE3E6b8")
coveragePlot <- plotTracks(list(gtrack, htrack))
}
}
#----- Set up Data Table for App -----#
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# Some constants for calculation/formatting avg. genome coverage:
genome_size <- 7383
previousMtxSize <- 0
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
# Run calculation, store in genomeCovVec - will be combined with readCounts
genomeCovVec <- vector(mode = "integer", length = length(rawFiles))
for (i in 1:length(rawFiles)) {
currentFile <- rawFiles[i]
currentFileName <- as.vector(strsplit(currentFile, "_coverage.txt")[[1]])
currentData <- read.delim(paste0("../sample_data/genome_coverage/",
currentFile),
header = FALSE,
col.names = columnNames)
currentData <- currentData %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(currentData$product)/genome_size,
digits = 0)
genomeCovVec[i] <- avg_cov
names(genomeCovVec)[i] <- currentFileName
}
# Add the average genome coverage numbers to the readCounts data
sampleData <- readCounts %>%
dplyr::mutate("avg_genome_cov" = genomeCovVec[sample])
names(sampleData) <- c("Sample", "Total Reads", "Primary Alignments",
"% MNV", "Average Coverage")
sampleData$Sample <- as.character(sampleData$Sample)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/Users/rache/Desktop/Projects/_Baldridge_Lab/Craig_MNV")
shiny::runApp('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/_RUMSPRINGA/rumspringa/rumspringa_shiny_app')
setwd("C:/Users/rache/Desktop/Projects/_Baldridge_Lab/Craig_MNV")
runApp('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/_RUMSPRINGA/rumspringa/rumspringa_shiny_app')
# Alignment Count Data #
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
setwd("C:/Users/rache/Desktop/Projects/_Baldridge_Lab/Craig_MNV/shiny_app")
# Alignment Count Data #
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
runApp('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/_RUMSPRINGA/rumspringa/rumspringa_shiny_app')
#----- Libraries -----#
library("shiny")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
options(shiny.sanitize.errors = FALSE) # need to see the error
options(ucscChromosomeNames = FALSE) # for Gvis
#----- Global variables -----#
previousMtxSize <- 0 # for determining when to re-paint the coverage plot
genome_size <- 7383 # For calculation/formatting avg. genome coverage
#----- Function Definitions -----#
GetVCF <- function(sample) {
# Read in and format VCF file for selected sample
variantSample <- paste0("../variants/", sample, "_variants.vcf")
vcfFile <- read.delim(variantSample,
comment.char = "#", # ignore VCF header lines
header = FALSE,
colClasses = "character") # suppress conversion of columns
vcfHeaders <- c("Refence Genome", "Position",
"ID", "Reference", "Alternative",
"Quality", "Filter", "Info", "Format", "Values")
names(vcfFile) <- vcfHeaders
# The last number in Values will be the allelic depth - unfiltered number of
#   reads supporting the reported allele(s)
vcfFileFormatted <- vcfFile %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1)) %>%
select(-c("ID", "Filter", "Info", "Format", "Values"))
}
PlotCoverage <- function(sample, positions = NULL, widths = 1) {
# Get the coverage file
bedgraphDT <- fread(paste0("../alignment_files/", sample, "_sorted.bedGraph"),
col.names = c("chromosome", "start", "end", "value"))
# Generate the top axis track
gtrack <- GenomeAxisTrack(fontsize = 20, fontcolor = "black", col = "black")
# Generate the coverage track
dtrack <- DataTrack(range = bedgraphDT, genome = "ModCR6",
type = "histogram", name = "Coverage",
background.title = "slategrey", col.histogram = "grey28",
fontsize = 20)
# is positions null?
# if yes - plot tracks w/o highlights
# if no - plot tracks with highlights
if (is.null(positions)) {
coveragePlot <- plotTracks(list(gtrack, dtrack))
} else {
htrack <- HighlightTrack(trackList = list(dtrack),
start = positions,
width= widths,
inBackground = FALSE,
fill = "#FFE3E6b8")
coveragePlot <- plotTracks(list(gtrack, htrack))
}
}
#----- Set up Data Table for App -----#
# Alignment Count Data #
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
# Genome Coverage Data #
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
# Run calculation, store in genomeCovVec - will be combined with readCounts
genomeCovVec <- vector(mode = "integer", length = length(rawFiles))
for (i in 1:length(rawFiles)) {
currentFile <- rawFiles[i]
currentFileName <- as.vector(strsplit(currentFile, "_coverage.txt")[[1]])
currentData <- read.delim(paste0("../sample_data/genome_coverage/",
currentFile),
header = FALSE,
col.names = columnNames)
currentData <- currentData %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(currentData$product)/genome_size,
digits = 0)
genomeCovVec[i] <- avg_cov
names(genomeCovVec)[i] <- currentFileName
}
# Merge Data #
# Add the average genome coverage numbers to the readCounts data
sampleData <- readCounts %>%
dplyr::mutate("avg_genome_cov" = genomeCovVec[sample])
names(sampleData) <- c("Sample", "Total Reads", "Primary Alignments",
"% MNV", "Average Coverage")
sampleData$Sample <- as.character(sampleData$Sample)
runApp('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/_RUMSPRINGA/rumspringa/rumspringa_shiny_app')
shiny::runApp()
?tabPanel
runApp()
runApp()
?radioButtons
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Alignment Count Data #
GenerateAlignmentCounts <- function(sampleData) {
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim(paste0("../", sampleData, "_alignment_counts.txt"))
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
# Genome Coverage Data #
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
# Run calculation, store in genomeCovVec - will be combined with readCounts
genomeCovVec <- vector(mode = "integer", length = length(rawFiles))
for (i in 1:length(rawFiles)) {
currentFile <- rawFiles[i]
currentFileName <- as.vector(strsplit(currentFile, "_coverage.txt")[[1]])
currentData <- read.delim(paste0("../", sampleData,
"/sample_data/genome_coverage/",
currentFile),
header = FALSE,
col.names = columnNames)
currentData <- currentData %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(currentData$product)/genome_size,
digits = 0)
genomeCovVec[i] <- avg_cov
names(genomeCovVec)[i] <- currentFileName
}
# Merge Data #
# Add the average genome coverage numbers to the readCounts data
sampleData <- readCounts %>%
dplyr::mutate("avg_genome_cov" = genomeCovVec[sample])
names(sampleData) <- c("Sample", "Total Reads", "Primary Alignments",
"% MNV", "Average Coverage")
sampleData$Sample <- as.character(sampleData$Sample)
}
runApp()
runApp()
runApp()
runApp()
debugSource('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
pattern = "*_coverage.txt")
rawFiles <- list.files(path = paste0("../sample_data/", sampleData, "/genome_coverage/"),
# Genome Coverage Data #
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = paste0("../sample_data/", sampleData, "/genome_coverage/"),
pattern = "*_coverage.txt")
runApp()
View(sampleData)
runApp()
runApp()
runApp()
runApp()
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(sampleData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library("shiny")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
source("./global.R")
options(shiny.sanitize.errors = FALSE) # need to see the error
options(ucscChromosomeNames = FALSE) # for Gvis
?updateTabsetPanel
runApp()
runApp()
