col.names = c("chromosome", "start", "end", "value"))
# Generate the top axis track
gtrack <- GenomeAxisTrack(fontsize = 20, fontcolor = "black", col = "black")
# Generate the coverage track
dtrack <- DataTrack(range = bedgraphDT, genome = "ModCR6",
type = "histogram", name = "Coverage",
background.title = "slategrey", col.histogram = "grey28",
fontsize = 20)
# is positions null?
# if yes - plot tracks w/o highlights
# if no - plot tracks with highlights
if (is.null(positions)) {
coveragePlot <- plotTracks(list(gtrack, dtrack))
} else {
htrack <- HighlightTrack(trackList = list(dtrack),
start = positions,
width= widths,
inBackground = FALSE,
fill = "#FFE3E6b8")
coveragePlot <- plotTracks(list(gtrack, htrack))
}
}
#----- Set up Data Table for App -----#
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# Some constants for calculation/formatting avg. genome coverage:
genome_size <- 7383
previousMtxSize <- 0
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
# Run calculation, store in genomeCovVec - will be combined with readCounts
genomeCovVec <- vector(mode = "integer", length = length(rawFiles))
for (i in 1:length(rawFiles)) {
currentFile <- rawFiles[i]
currentFileName <- as.vector(strsplit(currentFile, "_coverage.txt")[[1]])
currentData <- read.delim(paste0("../sample_data/genome_coverage/",
currentFile),
header = FALSE,
col.names = columnNames)
currentData <- currentData %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(currentData$product)/genome_size,
digits = 0)
genomeCovVec[i] <- avg_cov
names(genomeCovVec)[i] <- currentFileName
}
# Add the average genome coverage numbers to the readCounts data
sampleData <- readCounts %>%
dplyr::mutate("avg_genome_cov" = genomeCovVec[sample])
names(sampleData) <- c("Sample", "Total Reads", "Primary Alignments",
"% MNV", "Average Coverage")
sampleData$Sample <- as.character(sampleData$Sample)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/Users/rache/Desktop/Projects/_Baldridge_Lab/Craig_MNV")
shiny::runApp('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/_RUMSPRINGA/rumspringa/rumspringa_shiny_app')
setwd("C:/Users/rache/Desktop/Projects/_Baldridge_Lab/Craig_MNV")
runApp('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/_RUMSPRINGA/rumspringa/rumspringa_shiny_app')
# Alignment Count Data #
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
setwd("C:/Users/rache/Desktop/Projects/_Baldridge_Lab/Craig_MNV/shiny_app")
# Alignment Count Data #
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
runApp('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/_RUMSPRINGA/rumspringa/rumspringa_shiny_app')
#----- Libraries -----#
library("shiny")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
options(shiny.sanitize.errors = FALSE) # need to see the error
options(ucscChromosomeNames = FALSE) # for Gvis
#----- Global variables -----#
previousMtxSize <- 0 # for determining when to re-paint the coverage plot
genome_size <- 7383 # For calculation/formatting avg. genome coverage
#----- Function Definitions -----#
GetVCF <- function(sample) {
# Read in and format VCF file for selected sample
variantSample <- paste0("../variants/", sample, "_variants.vcf")
vcfFile <- read.delim(variantSample,
comment.char = "#", # ignore VCF header lines
header = FALSE,
colClasses = "character") # suppress conversion of columns
vcfHeaders <- c("Refence Genome", "Position",
"ID", "Reference", "Alternative",
"Quality", "Filter", "Info", "Format", "Values")
names(vcfFile) <- vcfHeaders
# The last number in Values will be the allelic depth - unfiltered number of
#   reads supporting the reported allele(s)
vcfFileFormatted <- vcfFile %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1)) %>%
select(-c("ID", "Filter", "Info", "Format", "Values"))
}
PlotCoverage <- function(sample, positions = NULL, widths = 1) {
# Get the coverage file
bedgraphDT <- fread(paste0("../alignment_files/", sample, "_sorted.bedGraph"),
col.names = c("chromosome", "start", "end", "value"))
# Generate the top axis track
gtrack <- GenomeAxisTrack(fontsize = 20, fontcolor = "black", col = "black")
# Generate the coverage track
dtrack <- DataTrack(range = bedgraphDT, genome = "ModCR6",
type = "histogram", name = "Coverage",
background.title = "slategrey", col.histogram = "grey28",
fontsize = 20)
# is positions null?
# if yes - plot tracks w/o highlights
# if no - plot tracks with highlights
if (is.null(positions)) {
coveragePlot <- plotTracks(list(gtrack, dtrack))
} else {
htrack <- HighlightTrack(trackList = list(dtrack),
start = positions,
width= widths,
inBackground = FALSE,
fill = "#FFE3E6b8")
coveragePlot <- plotTracks(list(gtrack, htrack))
}
}
#----- Set up Data Table for App -----#
# Alignment Count Data #
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
# Genome Coverage Data #
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
# Run calculation, store in genomeCovVec - will be combined with readCounts
genomeCovVec <- vector(mode = "integer", length = length(rawFiles))
for (i in 1:length(rawFiles)) {
currentFile <- rawFiles[i]
currentFileName <- as.vector(strsplit(currentFile, "_coverage.txt")[[1]])
currentData <- read.delim(paste0("../sample_data/genome_coverage/",
currentFile),
header = FALSE,
col.names = columnNames)
currentData <- currentData %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(currentData$product)/genome_size,
digits = 0)
genomeCovVec[i] <- avg_cov
names(genomeCovVec)[i] <- currentFileName
}
# Merge Data #
# Add the average genome coverage numbers to the readCounts data
sampleData <- readCounts %>%
dplyr::mutate("avg_genome_cov" = genomeCovVec[sample])
names(sampleData) <- c("Sample", "Total Reads", "Primary Alignments",
"% MNV", "Average Coverage")
sampleData$Sample <- as.character(sampleData$Sample)
runApp('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/_RUMSPRINGA/rumspringa/rumspringa_shiny_app')
shiny::runApp()
?tabPanel
runApp()
runApp()
?radioButtons
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Alignment Count Data #
GenerateAlignmentCounts <- function(sampleData) {
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim(paste0("../", sampleData, "_alignment_counts.txt"))
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
# Genome Coverage Data #
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
# Run calculation, store in genomeCovVec - will be combined with readCounts
genomeCovVec <- vector(mode = "integer", length = length(rawFiles))
for (i in 1:length(rawFiles)) {
currentFile <- rawFiles[i]
currentFileName <- as.vector(strsplit(currentFile, "_coverage.txt")[[1]])
currentData <- read.delim(paste0("../", sampleData,
"/sample_data/genome_coverage/",
currentFile),
header = FALSE,
col.names = columnNames)
currentData <- currentData %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(currentData$product)/genome_size,
digits = 0)
genomeCovVec[i] <- avg_cov
names(genomeCovVec)[i] <- currentFileName
}
# Merge Data #
# Add the average genome coverage numbers to the readCounts data
sampleData <- readCounts %>%
dplyr::mutate("avg_genome_cov" = genomeCovVec[sample])
names(sampleData) <- c("Sample", "Total Reads", "Primary Alignments",
"% MNV", "Average Coverage")
sampleData$Sample <- as.character(sampleData$Sample)
}
runApp()
runApp()
runApp()
runApp()
debugSource('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
pattern = "*_coverage.txt")
rawFiles <- list.files(path = paste0("../sample_data/", sampleData, "/genome_coverage/"),
# Genome Coverage Data #
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = paste0("../sample_data/", sampleData, "/genome_coverage/"),
pattern = "*_coverage.txt")
runApp()
View(sampleData)
runApp()
runApp()
runApp()
runApp()
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(sampleData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library("shiny")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
source("./global.R")
options(shiny.sanitize.errors = FALSE) # need to see the error
options(ucscChromosomeNames = FALSE) # for Gvis
?updateTabsetPanel
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
library("shinythemes")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?verbatimTextOutput
library("shiny")
library("shinythemes")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
source("./global.R")
runApp()
runApp()
runApp()
runApp()
runApp()
6/15
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
testSampleCountDF <- GenerateAlignmentCounts(sampleData = "baldridge_rumspringa")
args(GenerateAlignmentCounts)
testSampleCountDF <- GenerateAlignmentCounts(dataSet = "baldridge_rumspringa")
View(testSampleCountDF)
primaryAlign <- subset(testSampleDF, Sample == "Baldridge_1")
primaryAlign <- subset(testSampleCountDF, Sample == "Baldridge_1")
View(primaryAlign)
primaryAlign <- subset(testSampleCountDF, Sample == "Baldridge_1")$`Primary Alignments`
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
class(primaryAlign)
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
testVCFFile <- GetVCF(dataSet = "baldridge_rumspringa", sample = "Baldridge_1")
GetVCF <- function(dataSet, sample) {
# Read in and format VCF file for selected sample
variantSample <- paste0("../", dataSet, "/variants/", sample, "_variants.vcf")
vcfFile <- read.delim(variantSample,
comment.char = "#", # ignore VCF header lines
header = FALSE,
colClasses = "character") # suppress conversion of columns
vcfHeaders <- c("Refence Genome", "Position",
"ID", "Reference", "Alternative",
"Quality", "Filter", "Info", "Format", "Values")
names(vcfFile) <- vcfHeaders
# Get the primary alignment value from the current sample's alignment counts
sampleAlignmentCounts <- GenerateAlignmentCounts(dataSet)
samplePrimaryAlignments <- subset(sampleAlignmentCounts,
Sample == sample)$`Primary Alignments`
# Filter sampleAlignmentCounts by sample
#samplePrimaryAlignments <- subset(GenerateAlignmentCounts,
#sample == sample)$primary_alignments
# The last number in Values will be the allelic depth - unfiltered number of
#   reads supporting the reported allele(s)
vcfFileFormatted <- vcfFile %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1)) %>%
select(-c("ID", "Filter", "Info", "Format", "Values"))
}
testVCFFile <- GetVCF(dataSet = "baldridge_rumspringa", sample = "Baldridge_1")
View(testVCFFile)
copy <- copy %>%
mutate("Allelic Frequence" = `Allelic Depth`/primaryAlign)
primaryAlign
copy <- testVCFFile
copy$`Allelic Depth`
copy <- copy %>%
mutate("Allelic Frequence" = `Allelic Depth`/primaryAlign)
View(copy)
copy <- copy %>%
mutate("Allelic Frequence" = `as.numeric(Allelic Depth`)/primaryAlign)
copy <- copy %>%
mutate("Allelic Frequence" = as.numeric(`Allelic Depth`)/primaryAlign)
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
install.packages("shinyjs")
library("shinyjs")
runApp()
runApp()
runApp()
runApp()
?return
shiny::runApp()
runApp()
?updateTabsetPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?headerPanel
?uiOutput
?insertUI
runApp()
shiny::runApp()
?div
?insertUI
runApp()
runApp()
runApp()
runApp()
?tagList
runApp()
?tags
?shinyjs::enable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?size
?tabsetPanel
?lapply
runApp('C:/Users/rache/Desktop')
runApp('C:/Users/rache/Desktop')
runApp('C:/Users/rache/Desktop')
list.files(.)
list.files("./")
source("global.R")
runApp('C:/Users/rache/Desktop')
runApp('C:/Users/rache/Desktop')
source("./global.R")
runApp('C:/Users/rache/Desktop')
runApp('C:/Users/rache/Desktop')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
testVec <- c("s1", "s2", "s3")
testVec
testVec2 <- testVec[!(testVec %in% "s2")]
testVec2
testVec %in% "s2"
runApp()
runApp()
runApp()
runApp()
?eventReactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?uiOutput
sampleTextVec <- c("Baldridge_1", "Baldridge_2", "Baldridge_3")
testLoop <- lapply(GetVCF, sampleTextVec)
testLoop <- lapply(GetVCF(), sampleTextVec)
GetVCF
args(GetVCF)
testLoop <- map(sampleTextVec, GetVCF, dataSet = "baldridge_rumspringa")
runApp()
runApp()
runApp()
runApp()
runApp()
View(testLoop)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?datatable
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
testVec <- c("Baldridge_10", "Baldridge_11", "Baldridge_12")
"Baldridge_10" %in% testVec
testVec %in% "Baldridge_10"
testVec != "Baldridge_10"
testVec[testVec != "Baldridge_10"]
runApp()
runApp()
runApp()
runApp()
