names(sampleData) <- c("Sample", "Total Reads", "Primary Alignments",
"% MNV", "Average Coverage")
sampleData$Sample <- as.character(sampleData$Sample)
}
runApp()
runApp()
runApp()
runApp()
debugSource('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
pattern = "*_coverage.txt")
rawFiles <- list.files(path = paste0("../sample_data/", sampleData, "/genome_coverage/"),
# Genome Coverage Data #
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = paste0("../sample_data/", sampleData, "/genome_coverage/"),
pattern = "*_coverage.txt")
runApp()
View(sampleData)
runApp()
runApp()
runApp()
runApp()
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(sampleData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library("shiny")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
source("./global.R")
options(shiny.sanitize.errors = FALSE) # need to see the error
options(ucscChromosomeNames = FALSE) # for Gvis
?updateTabsetPanel
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
library("shinythemes")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?verbatimTextOutput
library("shiny")
library("shinythemes")
library("DT")
library("Gviz")
library("data.table")
library("tidyverse")
source("./global.R")
runApp()
runApp()
runApp()
runApp()
runApp()
6/15
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
testSampleCountDF <- GenerateAlignmentCounts(sampleData = "baldridge_rumspringa")
args(GenerateAlignmentCounts)
testSampleCountDF <- GenerateAlignmentCounts(dataSet = "baldridge_rumspringa")
View(testSampleCountDF)
primaryAlign <- subset(testSampleDF, Sample == "Baldridge_1")
primaryAlign <- subset(testSampleCountDF, Sample == "Baldridge_1")
View(primaryAlign)
primaryAlign <- subset(testSampleCountDF, Sample == "Baldridge_1")$`Primary Alignments`
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
class(primaryAlign)
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
testVCFFile <- GetVCF(dataSet = "baldridge_rumspringa", sample = "Baldridge_1")
GetVCF <- function(dataSet, sample) {
# Read in and format VCF file for selected sample
variantSample <- paste0("../", dataSet, "/variants/", sample, "_variants.vcf")
vcfFile <- read.delim(variantSample,
comment.char = "#", # ignore VCF header lines
header = FALSE,
colClasses = "character") # suppress conversion of columns
vcfHeaders <- c("Refence Genome", "Position",
"ID", "Reference", "Alternative",
"Quality", "Filter", "Info", "Format", "Values")
names(vcfFile) <- vcfHeaders
# Get the primary alignment value from the current sample's alignment counts
sampleAlignmentCounts <- GenerateAlignmentCounts(dataSet)
samplePrimaryAlignments <- subset(sampleAlignmentCounts,
Sample == sample)$`Primary Alignments`
# Filter sampleAlignmentCounts by sample
#samplePrimaryAlignments <- subset(GenerateAlignmentCounts,
#sample == sample)$primary_alignments
# The last number in Values will be the allelic depth - unfiltered number of
#   reads supporting the reported allele(s)
vcfFileFormatted <- vcfFile %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1)) %>%
select(-c("ID", "Filter", "Info", "Format", "Values"))
}
testVCFFile <- GetVCF(dataSet = "baldridge_rumspringa", sample = "Baldridge_1")
View(testVCFFile)
copy <- copy %>%
mutate("Allelic Frequence" = `Allelic Depth`/primaryAlign)
primaryAlign
copy <- testVCFFile
copy$`Allelic Depth`
copy <- copy %>%
mutate("Allelic Frequence" = `Allelic Depth`/primaryAlign)
View(copy)
copy <- copy %>%
mutate("Allelic Frequence" = `as.numeric(Allelic Depth`)/primaryAlign)
copy <- copy %>%
mutate("Allelic Frequence" = as.numeric(`Allelic Depth`)/primaryAlign)
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
install.packages("shinyjs")
library("shinyjs")
runApp()
runApp()
runApp()
runApp()
?return
shiny::runApp()
runApp()
?updateTabsetPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?headerPanel
?uiOutput
?insertUI
runApp()
shiny::runApp()
?div
?insertUI
runApp()
runApp()
runApp()
runApp()
?tagList
runApp()
?tags
?shinyjs::enable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?size
?tabsetPanel
?lapply
runApp('C:/Users/rache/Desktop')
runApp('C:/Users/rache/Desktop')
runApp('C:/Users/rache/Desktop')
list.files(.)
list.files("./")
source("global.R")
runApp('C:/Users/rache/Desktop')
runApp('C:/Users/rache/Desktop')
source("./global.R")
runApp('C:/Users/rache/Desktop')
runApp('C:/Users/rache/Desktop')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
testVec <- c("s1", "s2", "s3")
testVec
testVec2 <- testVec[!(testVec %in% "s2")]
testVec2
testVec %in% "s2"
runApp()
runApp()
runApp()
runApp()
?eventReactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?uiOutput
sampleTextVec <- c("Baldridge_1", "Baldridge_2", "Baldridge_3")
testLoop <- lapply(GetVCF, sampleTextVec)
testLoop <- lapply(GetVCF(), sampleTextVec)
GetVCF
args(GetVCF)
testLoop <- map(sampleTextVec, GetVCF, dataSet = "baldridge_rumspringa")
runApp()
runApp()
runApp()
runApp()
runApp()
View(testLoop)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?datatable
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
testVec <- c("Baldridge_10", "Baldridge_11", "Baldridge_12")
"Baldridge_10" %in% testVec
testVec %in% "Baldridge_10"
testVec != "Baldridge_10"
testVec[testVec != "Baldridge_10"]
runApp()
runApp()
runApp()
runApp()
library("shiny")
library("shinythemes")
install.packages(shinythemes)
install.packages("shinythemes")
library("shinythemes")
install.packages("shinyjs")
library("shinyjs")
library("DT")
install.packages("DT")
install.packages("Gviz")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Gviz", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if(!require(installr)) {
install.packages("installr"); require(installr)}
library("installr")
updateR()
shiny::runApp()
?tags
runApp()
?caption
runApp()
?renderPlot
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
?checkboxInput
runApp()
runApp()
runApp()
?shinyjs::hidden
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?eventReactive
runApp()
runApp()
runApp()
emptyVec <- vector(mode = "character")
length(emptyVec)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsubread", version = "3.8")
library("Rsubread")
BiocManager::install("Rsubread", version = "3.8")
install.packages("Rusbread")
.findCommonVariants_inner <- function(VCF_files)
{
for(vcf_file in VCF_files)
{
print(paste("Doing", vcf_file))
vcf_body <- read.delim(vcf_file, comment.char='#', header=FALSE)
nky <- 0
for(row_no in 1:nrow(vcf_body))
{
alts <- strsplit(as.vector(vcf_body$V5[row_no]), ',')
alts <- alts[[1]]
nky <- nky + length(alts)
}
print(paste("NROW =", nky))
data_mat <- matrix(ncol = 3, nrow = nky)
n2 <- 1
for(row_no in 1:nrow(vcf_body))
{
vcf_row <- vcf_body[row_no,]
key_values <- strsplit(as.vector(vcf_row$V8), ';')
key_values <- key_values[[1]]
key_type <- ifelse('INDEL' %in% key_values, 'INDEL','SNP')
alts <- strsplit(as.vector(vcf_row$V5), ',')
alts <- alts[[1]]
chro <- vcf_row$V1
pos <- vcf_row$V2
qual <- vcf_row$V6
for(alt in alts)
{
ky = paste(key_type, chro, pos, alt)
data_mat[n2,1] <- ky
data_mat[n2,2] <- qual
data_mat[n2,3] <- as.vector(vcf_row$V8)
n2<-n2+1
}
print(paste("CUR_ROW" , n2))
n2<-n2+1
}
}
}
?list.files
vcfFiles <- list.files("../craig_mnv/variants/", pattern = ".vcf")
vcfFiles <- list.files("../craig_mnv/variants/", pattern = ".vcf", full.names = TRUE)
findCommonVariants <- function(VCF_files)
{
VCF_files <- normalizePath(VCF_files, mustWork=T)
fout <- file.path(".",paste(".Rsubread_featureCounts_pid",Sys.getpid(),sep=""))
files_C <- paste(VCF_files,collapse=";")
cmd <- paste('-o', fout, files_C, sep=';')
n <- 2 + length(VCF_files)
C_args <- .C("R_mergeVCF",as.integer(n),as.character(cmd),PACKAGE="Rsubread")
x <- try(read.delim(fout,stringsAsFactors=FALSE, comment.char="#"),silent=TRUE)
file.remove(fout)
if(class(x)!='try-error') {
colnames(x)[1:8] <- c("Chr","Pos","Reference","Identity","Alternative","Quality", "Filter","Info")
x
}
else{
NA
}
}
.findCommonVariants_inner <- function(VCF_files)
{
for(vcf_file in VCF_files)
{
print(paste("Doing", vcf_file))
vcf_body <- read.delim(vcf_file, comment.char='#', header=FALSE)
nky <- 0
for(row_no in 1:nrow(vcf_body))
{
alts <- strsplit(as.vector(vcf_body$V5[row_no]), ',')
alts <- alts[[1]]
nky <- nky + length(alts)
}
print(paste("NROW =", nky))
data_mat <- matrix(ncol = 3, nrow = nky)
n2 <- 1
for(row_no in 1:nrow(vcf_body))
{
vcf_row <- vcf_body[row_no,]
key_values <- strsplit(as.vector(vcf_row$V8), ';')
key_values <- key_values[[1]]
key_type <- ifelse('INDEL' %in% key_values, 'INDEL','SNP')
alts <- strsplit(as.vector(vcf_row$V5), ',')
alts <- alts[[1]]
chro <- vcf_row$V1
pos <- vcf_row$V2
qual <- vcf_row$V6
for(alt in alts)
{
ky = paste(key_type, chro, pos, alt)
data_mat[n2,1] <- ky
data_mat[n2,2] <- qual
data_mat[n2,3] <- as.vector(vcf_row$V8)
n2<-n2+1
}
print(paste("CUR_ROW" , n2))
n2<-n2+1
}
}
}
test <- findCommonVariants(VCF_files = vcfFiles)
rm(vcfFiles)
rm(findCommonVariants())
rm(findCommonVariants
)
rm(emptyVec, plotTest, testVector)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?enable
runApp()
runApp()
runApp()
runApp()
library("phyloseq")
detach("phyloseq")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?verbatimTextOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library("beepr")
shiny::runApp()
runApp()
runApp()
?beep
beep(2)
beep(8)
beep(10)
beep(6)
beep(5)
beep(4)
beep(4)
beep(11)
beep(7)
beep(3)
beep(1)
