library("shiny")
library("DT")
library("stringr")
library("tidyverse")
GetVCF <- function(sample) {
# Read in and format VCF file for selected sample
variantSample <- paste0("../variants/", sample, "_variants.vcf")
vcfFile <- read.delim(variantSample,
comment.char = "#", # ignore VCF header lines
header = FALSE,
colClasses = "character") # suppress conversion of columns
vcfHeaders <- c("RefGenome", "Position", "ID", "Reference", "Alternative",
"Quality", "Filter", "Info", "Format", "Values")
names(vcfFile) <- vcfHeaders
# The last number in Values will be the allelic depth - unfiltered number of
#   reads supporting the reported allele(s)
vcfFileFormatted <- vcfFile %>%
mutate("AllelicDepth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1)) %>%
select(-c("ID", "Filter", "Info", "Format", "Values"))
}
# Read in sample alignment count data, calculate percent MNV
readCounts <- read.delim("../alignment_counts.txt")
View(readCounts)
readCounts <- readCounts %>%
mutate("percent_MNV" = round(100*(primary_alignments/total_reads),
digits = 2))
View(readCounts)
665/67502
# Read in genome coverage count data, calculate avg. genome coverage
rawFiles <- list.files(path = "../sample_data/genome_coverage/",
pattern = "*_coverage.txt")
# Some constants for calculation/formatting avg. genome coverage:
genome_size <- 7383
# column names determined from documentation at
# https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
# Run calculation, store in genomeCovVec - will be combined with readCounts
genomeCovVec <- vector(mode = "integer", length = length(rawFiles))
for (i in 1:length(rawFiles)) {
currentFile <- rawFiles[i]
currentFileName <- as.vector(strsplit(currentFile, "_coverage.txt")[[1]])
currentData <- read.delim(paste0(rawFileDir, currentFile), header = FALSE,
col.names = columnNames)
currentData <- currentData %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(currentData$product)/genome_size,
digits = 0)
genomeCovVec[i] <- avg_cov
names(genomeCovVec)[i] <- currentFileName
}
# Add the average genome coverage numbers to the readCounts data
sampleData <- readCounts %>%
dplyr::mutate("avg_genome_cov" = genomeCovVec[sample])
genomeCovVec <- vector(mode = "integer", length = length(rawFiles))
for (i in 1:length(rawFiles)) {
currentFile <- rawFiles[i]
currentFileName <- as.vector(strsplit(currentFile, "_coverage.txt")[[1]])
currentData <- read.delim(paste0("../sample_data/genome_coverage/",
currentFile),
header = FALSE,
col.names = columnNames)
currentData <- currentData %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(currentData$product)/genome_size,
digits = 0)
genomeCovVec[i] <- avg_cov
names(genomeCovVec)[i] <- currentFileName
}
# Add the average genome coverage numbers to the readCounts data
sampleData <- readCounts %>%
dplyr::mutate("avg_genome_cov" = genomeCovVec[sample])
View(sampleData)
runApp()
?renderDataTable
runApp()
names(sampleData) <- c("Sample", "Total Reads", "% MNV", "Average Coverage")
runApp()
runApp()
