vcfFileAnnotated[i, "Mutation Type"] <- "INDEL"
next()
} else {
mutantAllele <- currentRow$Alternative
mutantPosition <- currentRow$Position
currentCodonLUT <- NULL
currentCodonClassList <- NULL
if (mutantPosition %in% orf1Range) {
currentCodonLUT <- orf1CodonLUT
currentCodonClassList <- orf1CodonClassList
} else if (mutantPosition %in% orf2Range) {
currentCodonLUT <- orf2CodonLUT
currentCodonClassList <- orf2CodonClassList
} else if (mutantPosition %in% orf3Range) {
currentCodonLUT <- orf3CodonLUT
currentCodonClassList <- orf3CodonClassList
}
# if mutant position doesn't align to any orf, move on to next mutation
if (is.null(currentCodonClassList)) {
currentRow$`Mutation Type` <- "non-coding"
isNonCodingMutation <- TRUE
next()
}
# determine identity of ref protein
referenceCodonName <- currentCodonLUT[as.character(mutantPosition)]
referenceCodon <- currentCodonClassList[[referenceCodonName]]
referenceCodonString <- paste(referenceCodon@sequence_vector, collapse = "")
referenceProtein <- Biostrings::GENETIC_CODE[[referenceCodonString]]
referenceProteinFull <- aminoAcidCode[[referenceProtein]]
vcfFileAnnotated[i, "Reference Protein"] <- referenceProteinFull
vcfFileAnnotated[i, "Reference Codon"] <- referenceCodonString
# determine identity of mutant protein from ref codon
mutantCodon <- referenceCodon@sequence_vector
mutantCodon[as.character(mutantPosition)] <- mutantAllele
mutantCodonString <- paste(mutantCodon, collapse = "")
mutantProtein <- Biostrings::GENETIC_CODE[[mutantCodonString]]
mutantProteinFull <- aminoAcidCode[[mutantProtein]]
vcfFileAnnotated[i, "Mutant Protein"] <- mutantProteinFull
vcfFileAnnotated[i, "Mutant Codon"] <- mutantCodonString
# Determine mutation type
if (referenceProtein == mutantProtein) {
# synonymous
vcfFileAnnotated[i, "Mutation Type"] <- "synonymous"
} else {
if (mutantProtein == "*") {
# nonsense
vcfFileAnnotated[i, "Mutation Type"] <- "nonsense"
} else {
# missense
vcfFileAnnotated[i, "Mutation Type"] <- "missense"
}
}
}
}
# write the file out
write.table(x = vcfFileAnnotated,
file = paste(annotatedVCFDirectory, "/",
variantSampleName, "_annotated.txt",
sep = ""),
append = FALSE, quote = FALSE, sep = "\t", row.names = FALSE)
} else { # empty file
write.table(x = vcfFile,
file = paste(annotatedVCFDirectory, "/",
variantSampleName, "_annotated.txt",
sep = ""),
append = FALSE, quote = FALSE, sep = "\t", row.names = FALSE)
}
}
shiny::runApp()
runApp()
previousMtxSize <- 0 # for determining when to re-paint the coverage plot
shiny::runApp()
shiny::runApp()
runApp()
dataSet <- "larry_mnv_190306"
metadataFileName <- paste0("../", dataSet, "/", dataSet, "_metadata.txt")
?file.exists
# Do we need to add metadata?
#   Check for the existence of a metadata file.  If it exists, read-in,
#   merge with the sample data and return.
metadataFile <- paste0("../", dataSet, "/", dataSet, "_metadata.txt")
file.exists(metadataFile)
metadata <- read.delim(metadataFile)
View(metadata)
sampleDataExtended <- merge(sampleData, metadata, by = "Sample")
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
source('C:/Users/rache/Desktop/Projects/_Baldridge_Lab/VariantViewR/VariantViewR_shiny_app/global.R')
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?list.files
?read.delim
# test w/one file:
# Get all sample names:
sampleNames <- read.delim(file = "../baldridge_rumspringa_lookup.txt")
View(sampleNames)
# test w/one file:
# Get all sample names:
sampleNames <- read.delim(file = "../baldridge_rumspringa_lookup.txt",
header = FALSE, stringsAsFactors = FALSE)
View(sampleNames)
library("tidyverse")
?str_extract
sampleNames <- sampleNames %>%
mutate("name" = str_extract(V1,
pattern = "^Baldridge_[:digit:]"))
# test w/one file:
# Get all sample names:
sampleNames <- read.delim(file = "../baldridge_rumspringa_lookup.txt",
header = FALSE, stringsAsFactors = FALSE)
sampleNames <- sampleNames %>%
mutate("name" = str_extract(V1,
pattern = "^Baldridge_[:digit:]{1,2}"))
# test w/one file:
# Get all sample names:
sampleNames <- read.delim(file = "../baldridge_rumspringa_lookup.txt",
header = FALSE, stringsAsFactors = FALSE)
# test w/one file:
# Get all sample names:
sampleNamesLong <- read.delim(file = "../baldridge_rumspringa_lookup.txt",
header = FALSE, stringsAsFactors = FALSE)
sampleNames <- str_extract(sampleNamesLong$V1,
pattern = "^Baldridge_[:digit:]{1,2}")
# test w/one file:
currentSample <- sampleNames[1]
# Get average genome coverage
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
coverageFile <- read.delim(paste0("../baldridge_rumspringa/sample_data/genome_coverage/",
currentSample),
header = FALSE,
col.names = columnNames)
coverageFile <- read.delim(paste0("../baldridge_rumspringa/sample_data/genome_coverage/",
currentSample, "_coverage.txt"),
header = FALSE,
col.names = columnNames)
View(coverageFile)
coverageFile <- coverageFile %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
avg_cov <- round(sum(coverageFile$product)/7383,
digits = 0)
avgerageCoverage <- round(sum(coverageFile$product)/7383, digits = 0)
#----- Mutation Info -----#
mutationFile <- read.delim(file = paste0("../baldridge_rumspringa/variants/annotated_variants/",
currentSample, "_variants_annotated.txt"),
header = TRUE)
View(mutationFile)
mutationFileModified <- mutationFile %>%
select(Position, Reference, Alternative, Quality, Info, Values) %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1),
"Total Depth" = str_remove(str_extract(Info, "DP=[:digit:]+"),
"DP="))
View(mutationFileModified)
mutationFileModified <- mutationFile %>%
select(Position, Reference, Alternative, Quality, Info, Values) %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1),
"Total Depth" = str_remove(str_extract(Info, "DP=[:digit:]+"),
"DP="),
"Allelic Frequency (%)" =
round((100 * as.numeric(`Allelic Depth`)/as.numeric(`Total Depth`)),
digits = 2)) %>%
select(-c("Info", "Values"))
#----- Combine Info -----#
allInfo <- data.frame("Sample" = currentSample,
"Average Coverage" = averageCoverage,
mutationFileModified)
averageCoverage <- round(sum(coverageFile$product)/7383, digits = 0)
#----- Combine Info -----#
allInfo <- data.frame("Sample" = currentSample,
"Average Coverage" = averageCoverage,
mutationFileModified)
View(allInfo)
# test w/one file:
currentSample <- Baldridge_19
# test w/one file:
currentSample <- "Baldridge_19"
#----- Average Coverage -----#
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
coverageFile <- read.delim(paste0("../baldridge_rumspringa/sample_data/genome_coverage/",
currentSample, "_coverage.txt"),
header = FALSE,
col.names = columnNames)
coverageFile <- coverageFile %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
averageCoverage <- round(sum(coverageFile$product)/7383, digits = 0)
#----- Mutation Info -----#
mutationFile <- read.delim(file = paste0("../baldridge_rumspringa/variants/annotated_variants/",
currentSample, "_variants_annotated.txt"),
header = TRUE)
mutationFileModified <- mutationFile %>%
select(Position, Reference, Alternative, Quality, Info, Values) %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1),
"Total Depth" = str_remove(str_extract(Info, "DP=[:digit:]+"),
"DP="),
"Allelic Frequency (%)" =
round((100 * as.numeric(`Allelic Depth`)/as.numeric(`Total Depth`)),
digits = 2)) %>%
select(-c("Info", "Values"))
#----- Combine Info -----#
allInfo <- data.frame("Sample" = currentSample,
"Average Coverage" = averageCoverage,
mutationFileModified)
View(allInfo)
dfList <- list()
library("tidyverse")
# Get all sample names:
sampleNamesLong <- read.delim(file = "../baldridge_rumspringa_lookup.txt",
header = FALSE, stringsAsFactors = FALSE)
sampleNames <- str_extract(sampleNamesLong$V1,
pattern = "^Baldridge_[:digit:]{1,2}")
dfList <- list()
for (i in 1:length(sampleNames)) {
currentSample <- sampleNames[i]
#----- Average Coverage -----#
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
coverageFile <- read.delim(paste0("../baldridge_rumspringa/sample_data/genome_coverage/",
currentSample, "_coverage.txt"),
header = FALSE,
col.names = columnNames)
coverageFile <- coverageFile %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
averageCoverage <- round(sum(coverageFile$product)/7383, digits = 0)
#----- Mutation Info -----#
mutationFile <- read.delim(file = paste0("../baldridge_rumspringa/variants/annotated_variants/",
currentSample, "_variants_annotated.txt"),
header = TRUE)
mutationFileModified <- mutationFile %>%
select(Position, Reference, Alternative, Quality, Info, Values) %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1),
"Total Depth" = str_remove(str_extract(Info, "DP=[:digit:]+"),
"DP="),
"Allelic Frequency (%)" =
round((100 * as.numeric(`Allelic Depth`)/as.numeric(`Total Depth`)),
digits = 2)) %>%
select(-c("Info", "Values"))
#----- Combine Info -----#
allInfo <- data.frame("Sample" = currentSample,
"Average Coverage" = averageCoverage,
mutationFileModified)
dfList[i] <- allInfo
}
warnings()
rm(dfList)
dfList <- list()
for (i in 1:length(sampleNames)) {
currentSample <- sampleNames[i]
#----- Average Coverage -----#
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
coverageFile <- read.delim(paste0("../baldridge_rumspringa/sample_data/genome_coverage/",
currentSample, "_coverage.txt"),
header = FALSE,
col.names = columnNames)
coverageFile <- coverageFile %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
averageCoverage <- round(sum(coverageFile$product)/7383, digits = 0)
#----- Mutation Info -----#
mutationFile <- read.delim(file = paste0("../baldridge_rumspringa/variants/annotated_variants/",
currentSample, "_variants_annotated.txt"),
header = TRUE)
mutationFileModified <- mutationFile %>%
select(Position, Reference, Alternative, Quality, Info, Values) %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1),
"Total Depth" = str_remove(str_extract(Info, "DP=[:digit:]+"),
"DP="),
"Allelic Frequency (%)" =
round((100 * as.numeric(`Allelic Depth`)/as.numeric(`Total Depth`)),
digits = 2)) %>%
select(-c("Info", "Values"))
#----- Combine Info -----#
allInfo <- data.frame("Sample" = currentSample,
"Average Coverage" = averageCoverage,
mutationFileModified)
dfList[[i]] <- allInfo
}
View(dfList)
View(dfList[[1]])
?read.delim
dfList <- list()
for (i in 1:length(sampleNames)) {
currentSample <- sampleNames[i]
#----- Average Coverage -----#
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
coverageFile <- read.delim(paste0("../baldridge_rumspringa/sample_data/genome_coverage/",
currentSample, "_coverage.txt"),
header = FALSE,
col.names = columnNames,
stringsAsFactors = FALSE)
coverageFile <- coverageFile %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
averageCoverage <- round(sum(coverageFile$product)/7383, digits = 0)
#----- Mutation Info -----#
mutationFile <- read.delim(file = paste0("../baldridge_rumspringa/variants/annotated_variants/",
currentSample, "_variants_annotated.txt"),
header = TRUE, stringsAsFactors = FALSE)
mutationFileModified <- mutationFile %>%
select(Position, Reference, Alternative, Quality, Info, Values) %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1),
"Total Depth" = str_remove(str_extract(Info, "DP=[:digit:]+"),
"DP="),
"Allelic Frequency (%)" =
round((100 * as.numeric(`Allelic Depth`)/as.numeric(`Total Depth`)),
digits = 2)) %>%
select(-c("Info", "Values"))
#----- Combine Info -----#
allInfo <- data.frame("Sample" = currentSample,
"Average Coverage" = averageCoverage,
mutationFileModified)
dfList[[i]] <- allInfo
}
View(coverageFile)
View(dfList)
dfList <- list()
for (i in 1:length(sampleNames)) {
currentSample <- sampleNames[i]
#----- Average Coverage -----#
columnNames <- c("chromosome", "depth", "number_of_bases",
"chromosome_size", "fraction_of_bases")
coverageFile <- read.delim(paste0("../baldridge_rumspringa/sample_data/genome_coverage/",
currentSample, "_coverage.txt"),
header = FALSE,
col.names = columnNames,
stringsAsFactors = FALSE)
coverageFile <- coverageFile %>%
dplyr::select(depth, number_of_bases) %>%
dplyr::mutate(product = depth * number_of_bases)
averageCoverage <- round(sum(coverageFile$product)/7383, digits = 0)
#----- Mutation Info -----#
mutationFile <- read.delim(file = paste0("../baldridge_rumspringa/variants/annotated_variants/",
currentSample, "_variants_annotated.txt"),
header = TRUE, stringsAsFactors = FALSE,
colClasses = "character")
mutationFileModified <- mutationFile %>%
select(Position, Reference, Alternative, Quality, Info, Values) %>%
mutate("Allelic Depth" = map_chr(.x = str_split(Values, pattern = ","),
.f = tail, n = 1),
"Total Depth" = str_remove(str_extract(Info, "DP=[:digit:]+"),
"DP="),
"Allelic Frequency (%)" =
round((100 * as.numeric(`Allelic Depth`)/as.numeric(`Total Depth`)),
digits = 2)) %>%
select(-c("Info", "Values"))
#----- Combine Info -----#
allInfo <- data.frame("Sample" = currentSample,
"Average Coverage" = averageCoverage,
mutationFileModified)
dfList[[i]] <- allInfo
}
View(dfList)
View(dfList)
?Reduce
fullTable <- Reduce(f = function(df1, df2) {rbind(x = df1, y = df2)},
x = dfList)
View(fullTable)
?rbind
fullTable <- Reduce(f = function(df1, df2)
{rbind(x = df1, y = df2, make.row.names = FALSE)}, x = dfList)
View(fullTable)
?write.table
# Save
write.table(fullTable, file = "../sample_info_baldridge_rumspringa.txt",
quote = FALSE, sep = "\t", row.names = FALSE)
load("Mod_CR6_ORF_Information.RData")
library("dplyr")
library("stringr")
# Find correct files, store and loop
rawVCFFilePath <- "../l_ee_mnv_190403/variants"
rawVCFFiles <- list.files(rawVCFFilePath, pattern = ".vcf", full.names = TRUE)
# Find correct files, store and loop
rawVCFFilePath <- "../ls_ee_mnv_190403/variants"
rawVCFFiles <- list.files(rawVCFFilePath, pattern = ".vcf", full.names = TRUE)
annotatedVCFDirectory <- file.path(rawVCFFilePath, "annotated_variants")
dir.create(annotatedVCFDirectory)
for (j in 1:length(rawVCFFiles)) {
variantSample <- rawVCFFiles[j]
variantSampleName <- str_remove(string = basename(variantSample),
pattern = "\\.vcf")
# for current sample set, open each VCF file, add column for reference and mutant allele
# if the ref and/or alt is an INDEL, just mark columns as INDEL
vcfFile <- tryCatch({ # in case there are no variants in the VCF file
read.delim(variantSample,
comment.char = "#", # ignore VCF header lines
header = FALSE,
colClasses = "character") # suppress conversion of columns
},
error = function(e) {
# return an empty data frame
data.frame("Reference Genome" = character(0),
"Position" = character(0),
"ID" = character(0),
"Reference" = character(0),
"Alternative" = character(0),
"Quality"= character(0),
"Filter" = character(0),
"Info" = character(0),
"Format" = character(0),
"Values" = character(0))
})
vcfHeaders <- c("Reference Genome", "Position",
"ID", "Reference", "Alternative",
"Quality", "Filter", "Info", "Format", "Values")
names(vcfFile) <- vcfHeaders
# If VCF file isn't empty, add a column for Reference Protein, Alternative Protein,
#   and Mutation Type
# set orf ranges
orf1Range <- seq(from = 6, to = 5069)
orf2Range <- seq(from = 5070, to = 6681)
orf3Range <- seq(from = 6681, to = 7307)
if (nrow(vcfFile) != 0) {
vcfFileAnnotated <- cbind(vcfFile,
"Reference Codon" = NA, "Reference Protein" = NA,
"Mutant Codon" = NA, "Mutant Protein" = NA,
"Mutation Type" = NA)
# loop over the rows and populate the new columns
for (i in 1:nrow(vcfFileAnnotated)) {
currentRow <- vcfFileAnnotated[i, ]
if (nchar(currentRow$Reference) > 1 | nchar(currentRow$Alternative) > 1) {
vcfFileAnnotated[i, "Mutation Type"] <- "INDEL"
next()
} else {
mutantAllele <- currentRow$Alternative
mutantPosition <- currentRow$Position
currentCodonLUT <- NULL
currentCodonClassList <- NULL
if (mutantPosition %in% orf1Range) {
currentCodonLUT <- orf1CodonLUT
currentCodonClassList <- orf1CodonClassList
} else if (mutantPosition %in% orf2Range) {
currentCodonLUT <- orf2CodonLUT
currentCodonClassList <- orf2CodonClassList
} else if (mutantPosition %in% orf3Range) {
currentCodonLUT <- orf3CodonLUT
currentCodonClassList <- orf3CodonClassList
}
# if mutant position doesn't align to any orf, move on to next mutation
if (is.null(currentCodonClassList)) {
currentRow$`Mutation Type` <- "non-coding"
isNonCodingMutation <- TRUE
next()
}
# determine identity of ref protein
referenceCodonName <- currentCodonLUT[as.character(mutantPosition)]
referenceCodon <- currentCodonClassList[[referenceCodonName]]
referenceCodonString <- paste(referenceCodon@sequence_vector, collapse = "")
referenceProtein <- Biostrings::GENETIC_CODE[[referenceCodonString]]
referenceProteinFull <- aminoAcidCode[[referenceProtein]]
vcfFileAnnotated[i, "Reference Protein"] <- referenceProteinFull
vcfFileAnnotated[i, "Reference Codon"] <- referenceCodonString
# determine identity of mutant protein from ref codon
mutantCodon <- referenceCodon@sequence_vector
mutantCodon[as.character(mutantPosition)] <- mutantAllele
mutantCodonString <- paste(mutantCodon, collapse = "")
mutantProtein <- Biostrings::GENETIC_CODE[[mutantCodonString]]
mutantProteinFull <- aminoAcidCode[[mutantProtein]]
vcfFileAnnotated[i, "Mutant Protein"] <- mutantProteinFull
vcfFileAnnotated[i, "Mutant Codon"] <- mutantCodonString
# Determine mutation type
if (referenceProtein == mutantProtein) {
# synonymous
vcfFileAnnotated[i, "Mutation Type"] <- "synonymous"
} else {
if (mutantProtein == "*") {
# nonsense
vcfFileAnnotated[i, "Mutation Type"] <- "nonsense"
} else {
# missense
vcfFileAnnotated[i, "Mutation Type"] <- "missense"
}
}
}
}
# write the file out
write.table(x = vcfFileAnnotated,
file = paste(annotatedVCFDirectory, "/",
variantSampleName, "_annotated.txt",
sep = ""),
append = FALSE, quote = FALSE, sep = "\t", row.names = FALSE)
} else { # empty file
write.table(x = vcfFile,
file = paste(annotatedVCFDirectory, "/",
variantSampleName, "_annotated.txt",
sep = ""),
append = FALSE, quote = FALSE, sep = "\t", row.names = FALSE)
}
}
shiny::runApp()
runApp()
